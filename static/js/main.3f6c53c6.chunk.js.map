{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["GameState","numRows","Math","min","floor","window","innerHeight","numCols","innerWidth","defaultColor","maximumStep","createGrid","aliveProbability","rows","i","push","Array","from","random","operations","App","useState","grid","setGrid","Stopped","gameState","setGameState","step","setStep","stepInterval","setStepInterval","randomizeProbability","setRandomizeProbability","advancedControls","setAdvancedControls","colorPicker","setColorPicker","cellColor","setCellColor","gameStateRef","useRef","current","stepRef","stepIntervalRef","useEffect","stopSimulation","Running","runSimulation","useCallback","currentGrid","produce","draftGrid","j","neighbors","forEach","operation","newI","newJ","setTimeout","id","className","onClick","disabled","Paused","type","name","checked","onChange","onChangeComplete","rgb","r","g","b","a","max","value","e","parseInt","target","prob","parseFloat","place","effect","style","display","gridTemplateColumns","map","row","col","newGrid","width","height","backgroundColor","border","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f6c53c6.chunk.js","sourcesContent":["import produce from 'immer';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { GithubPicker } from 'react-color';\nimport ReactTooltip from \"react-tooltip\";\n\n\n// CONFIG\nconst cellSizePx = 20;\n// Number of rows and cols determined by initial client windows size\nconst numRows = Math.min(Math.floor(window.innerHeight * 0.7 / cellSizePx - 1), 500);\nconst numCols = Math.min(Math.floor(window.innerWidth * 0.9 / cellSizePx), 500);\nconst stepTimeout = 250;\nconst defaultRandomizeProbability = 0.5;\nconst defaultColor = {\n  r: 18,\n  g: 115,\n  b: 222,\n  a: 1\n}\n\nconst minimumStep = 100;\nconst maximumStep = 20000;\n\nconst minimumProbability = 0;\nconst maximumProbability = 1;\n\n// Function to create the template grid data structure\nconst createGrid = (aliveProbability?: number) => {\n  const rows = [];\n\n  if (aliveProbability) {\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => Math.random() >= (1 - aliveProbability) ? 1 : 0));\n    }\n  }\n  else {\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n  }\n\n\n  return rows;\n};\n\n// Helper structure to compute the neighbors of each cell\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, 0],\n  [-1, 0],\n  [1, -1],\n  [1, 1],\n  [-1, -1],\n  [-1, 1]\n]\n\nenum GameState {\n  Stopped,\n  Paused,\n  Running,\n}\n\nconst App: React.FC = () => {\n\n  // State\n  const [grid, setGrid] = useState(() => { return createGrid() });\n  const [gameState, setGameState] = useState(GameState.Stopped);\n  const [step, setStep] = useState(0);\n  const [stepInterval, setStepInterval] = useState(stepTimeout);\n  const [randomizeProbability, setRandomizeProbability] = useState(defaultRandomizeProbability);\n  const [advancedControls, setAdvancedControls] = useState(false);\n  const [colorPicker, setColorPicker] = useState(false);\n  const [cellColor, setCellColor] = useState(`rgba(${defaultColor.r}, ${defaultColor.g}, ${defaultColor.b}, ${defaultColor.a})`);\n\n\n  // Refs\n  const gameStateRef = useRef(gameState);\n  gameStateRef.current = gameState;\n\n  const stepRef = useRef(step);\n  stepRef.current = step;\n\n  const stepIntervalRef = useRef(stepInterval);\n  stepIntervalRef.current = stepInterval;\n\n  // Trigger corresponding actions when simulation is started/stopped\n  useEffect(() => {\n\n    if (gameState === GameState.Stopped) stopSimulation()\n    else if (gameState === GameState.Running) runSimulation()\n\n  }, [gameState])\n\n\n  // UseCallback to create the function only once\n  const runSimulation = useCallback(() => {\n\n    const gameState = gameStateRef.current;\n    if (gameState !== GameState.Running) return;\n\n    // Simulate current step\n    setGrid(currentGrid => {\n      return produce(currentGrid, draftGrid => {\n        for (let i = 0; i < numRows; i++) {\n          for (let j = 0; j < numCols; j++) {\n\n            let neighbors = 0;\n\n            operations.forEach(operation => {\n              const newI = i + operation[0];\n              const newJ = j + operation[1];\n\n              // Check bounds\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += currentGrid[newI][newJ];\n              }\n            });\n\n            // Game logic\n            if (neighbors < 2 || neighbors > 3) draftGrid[i][j] = 0;\n            else if (currentGrid[i][j] === 0 && neighbors === 3) draftGrid[i][j] = 1;\n\n          }\n        }\n      })\n    })\n\n    // Invoke next step\n    setStep(stepRef.current += 1);\n    setTimeout(runSimulation, stepIntervalRef.current);\n  }, [])\n\n  const stopSimulation = useCallback(() => {\n\n    setGrid(createGrid());\n    setStep(0);\n\n  }, []);\n\n  return (\n    <div id=\"main\">\n      <div className=\"upper\">\n        <div className=\"controls\">\n          <div className=\"form-group\">\n            <div>\n              <button\n                onClick={() => {\n                  if (gameState === GameState.Stopped) setGameState(GameState.Running)\n                  else setGameState(GameState.Stopped)\n                }}\n              >\n                {gameState === GameState.Stopped ? 'Start' : 'Stop'}\n              </button>\n              <button disabled={gameState === GameState.Stopped}\n                onClick={() => {\n                  if (gameState !== GameState.Paused) setGameState(GameState.Paused);\n                  else setGameState(GameState.Running);\n                }}\n              >\n                {gameState === GameState.Paused ? 'Resume' : 'Pause'}\n              </button>\n            </div>\n            <div>\n              <button disabled={gameState !== GameState.Stopped}\n                onClick={() => setGrid(createGrid(randomizeProbability))}>\n                Randomize\n            </button>\n              <button disabled={gameState === GameState.Running}\n                onClick={() => setGrid(createGrid())}\n              >\n                Clear\n            </button>\n            </div>\n            <label>\n              <input type=\"checkbox\" name=\"advanced-controls\" checked={advancedControls}\n                onChange={() => setAdvancedControls(!advancedControls)}\n              />\n            Show advanced controls\n          </label>\n          </div>\n\n          {/* Advanced controls */}\n          {\n            advancedControls && <div className=\"form-group\">\n              <div>\n                <div className=\"form-color-picker\">\n                  <button\n                    onClick={() => setColorPicker(!colorPicker)}\n                  >\n                    Change cell color\n                  {\n                      colorPicker &&\n                      <div className=\"color-picker\">\n                        <GithubPicker onChangeComplete={({ rgb }) => setCellColor(\n                          `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${rgb.a})`\n                        )} />\n                      </div>\n                    }\n                  </button>\n                </div>\n                <div>\n                  <label>\n                    Step interval (ms):\n                  <input\n                      type=\"number\"\n                      min={minimumStep}\n                      max={maximumStep}\n                      step={50}\n                      value={stepInterval}\n                      onChange={e => {\n                        const step = parseInt(e.target.value);\n\n                        if (step > maximumStep) setStepInterval(maximumStep)\n                        else if (step < minimumStep) setStepInterval(minimumStep)\n                        else setStepInterval(step)\n                      }}\n                    />\n                  </label>\n                </div>\n                <div>\n                  <label data-tip data-for=\"probabilityTip\">\n                    Alive probability:\n                  <input\n                      type=\"number\"\n                      min={minimumProbability}\n                      max={maximumProbability}\n                      step={0.1}\n                      value={randomizeProbability}\n                      onChange={e => {\n                        const prob = parseFloat(e.target.value);\n\n                        if (prob > maximumProbability) setRandomizeProbability(maximumProbability);\n                        else if (prob < minimumProbability) setRandomizeProbability(minimumProbability);\n                        else setRandomizeProbability(prob);\n                      }}\n                    />\n                  </label>\n                  <ReactTooltip id=\"probabilityTip\" place=\"bottom\" effect=\"solid\">\n                    Probability of generating alive cells when randomizing the grid\n                </ReactTooltip>\n                </div>\n              </div>\n\n            </div>\n          }\n\n\n        </div>\n        <div className=\"data\">\n          <p>Current step: {step}</p>\n\n        </div>\n      </div>\n      <div id=\"grid\"\n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, ${cellSizePx}px)`\n        }}>\n        {grid.map((row, i) =>\n          row.map((col, j) =>\n            <div\n              key={`${i}-${j}`} // Unique key based on cell position\n              onClick={() => { // Toggle cell on click\n                if (gameState === GameState.Running) return;\n\n                const newGrid = produce(grid, draftGrid => {\n                  draftGrid[i][j] = grid[i][j] ? 0 : 1;\n                });\n                setGrid(newGrid);\n              }}\n              style={{\n                width: 20, height: 20,\n                backgroundColor: grid[i][j] === 1 ? cellColor : 'white',\n                border: 'solid 1px black'\n              }}>\n\n            </div>))}\n      </div>\n    </div >\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}